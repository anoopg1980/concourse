// Code generated by counterfeiter. DO NOT EDIT.
package dbfakes

import (
	"sync"

	"github.com/concourse/concourse/atc/db"
)

type FakeAccessToken struct {
	ClaimsStub        func() db.Claims
	claimsMutex       sync.RWMutex
	claimsArgsForCall []struct {
	}
	claimsReturns struct {
		result1 db.Claims
	}
	claimsReturnsOnCall map[int]struct {
		result1 db.Claims
	}
	TokenStub        func() string
	tokenMutex       sync.RWMutex
	tokenArgsForCall []struct {
	}
	tokenReturns struct {
		result1 string
	}
	tokenReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAccessToken) Claims() db.Claims {
	fake.claimsMutex.Lock()
	ret, specificReturn := fake.claimsReturnsOnCall[len(fake.claimsArgsForCall)]
	fake.claimsArgsForCall = append(fake.claimsArgsForCall, struct {
	}{})
	fake.recordInvocation("Claims", []interface{}{})
	fake.claimsMutex.Unlock()
	if fake.ClaimsStub != nil {
		return fake.ClaimsStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.claimsReturns
	return fakeReturns.result1
}

func (fake *FakeAccessToken) ClaimsCallCount() int {
	fake.claimsMutex.RLock()
	defer fake.claimsMutex.RUnlock()
	return len(fake.claimsArgsForCall)
}

func (fake *FakeAccessToken) ClaimsCalls(stub func() db.Claims) {
	fake.claimsMutex.Lock()
	defer fake.claimsMutex.Unlock()
	fake.ClaimsStub = stub
}

func (fake *FakeAccessToken) ClaimsReturns(result1 db.Claims) {
	fake.claimsMutex.Lock()
	defer fake.claimsMutex.Unlock()
	fake.ClaimsStub = nil
	fake.claimsReturns = struct {
		result1 db.Claims
	}{result1}
}

func (fake *FakeAccessToken) ClaimsReturnsOnCall(i int, result1 db.Claims) {
	fake.claimsMutex.Lock()
	defer fake.claimsMutex.Unlock()
	fake.ClaimsStub = nil
	if fake.claimsReturnsOnCall == nil {
		fake.claimsReturnsOnCall = make(map[int]struct {
			result1 db.Claims
		})
	}
	fake.claimsReturnsOnCall[i] = struct {
		result1 db.Claims
	}{result1}
}

func (fake *FakeAccessToken) Token() string {
	fake.tokenMutex.Lock()
	ret, specificReturn := fake.tokenReturnsOnCall[len(fake.tokenArgsForCall)]
	fake.tokenArgsForCall = append(fake.tokenArgsForCall, struct {
	}{})
	fake.recordInvocation("Token", []interface{}{})
	fake.tokenMutex.Unlock()
	if fake.TokenStub != nil {
		return fake.TokenStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.tokenReturns
	return fakeReturns.result1
}

func (fake *FakeAccessToken) TokenCallCount() int {
	fake.tokenMutex.RLock()
	defer fake.tokenMutex.RUnlock()
	return len(fake.tokenArgsForCall)
}

func (fake *FakeAccessToken) TokenCalls(stub func() string) {
	fake.tokenMutex.Lock()
	defer fake.tokenMutex.Unlock()
	fake.TokenStub = stub
}

func (fake *FakeAccessToken) TokenReturns(result1 string) {
	fake.tokenMutex.Lock()
	defer fake.tokenMutex.Unlock()
	fake.TokenStub = nil
	fake.tokenReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeAccessToken) TokenReturnsOnCall(i int, result1 string) {
	fake.tokenMutex.Lock()
	defer fake.tokenMutex.Unlock()
	fake.TokenStub = nil
	if fake.tokenReturnsOnCall == nil {
		fake.tokenReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.tokenReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeAccessToken) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.claimsMutex.RLock()
	defer fake.claimsMutex.RUnlock()
	fake.tokenMutex.RLock()
	defer fake.tokenMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAccessToken) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ db.AccessToken = new(FakeAccessToken)
